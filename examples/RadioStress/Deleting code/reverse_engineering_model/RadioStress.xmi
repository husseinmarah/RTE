<?xml version="1.0" encoding="UTF-8"?>
<tinyos_metamodel:Mote xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:tinyos_metamodel="http://emf.tinyos_metamodel">
  <hasApplication Name="RadioStress">
    <hasComponent Name="Module Component">
      <containsModule Name="RadioStressC">
        <has_module_signature Name="RadioStressC">
          <usesInterface Name="Boot"/>
          <usesInterface Name="BlockingStdControl as BlockingAMControl"/>
          <usesInterface Name="Thread as RadioStressThread0"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend0"/>
          <usesInterface Name="BlockingReceive as BlockingReceive0"/>
          <usesInterface Name="Thread as RadioStressThread1"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend1"/>
          <usesInterface Name="BlockingReceive as BlockingReceive1"/>
          <usesInterface Name="Thread as RadioStressThread2"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend2"/>
          <usesInterface Name="BlockingReceive as BlockingReceive2"/>
          <usesInterface Name="Leds"/>
        </has_module_signature>
        <has_module_implementation>
          <has_nesC_code Content="message_t m0;"/>
          <has_nesC_code Content="message_t m1;"/>
          <has_nesC_code Content="message_t m2;"/>
          <implementsEvent Name="Boot.booted()" Contents="&#xD;&#xA;&#x9;   /* event content */&#xD;&#xA;&#x9;   &#xD;&#xA;&#x9;    call RadioStressThread0.start(NULL);&#xD;&#xA;&#x9;    call RadioStressThread1.start(NULL);&#xD;&#xA;&#x9;    call RadioStressThread2.start(NULL);&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9; "/>
          <implementsEvent Name="RadioStressThread0.run(void* arg)" Contents="&#xD;&#xA;&#x9;   /* event content */&#xD;&#xA;&#x9;   &#xD;&#xA;&#x9;    call BlockingAMControl.start();&#xD;&#xA;&#x9;    for(;;) {&#xD;&#xA;&#x9;      if(TOS_NODE_ID == 0) {&#xD;&#xA;&#x9;        call BlockingReceive0.receive(&amp;m0, 5000);&#xD;&#xA;&#x9;        call Leds.led0Toggle();&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;      else {&#xD;&#xA;&#x9;        call BlockingAMSend0.send(!TOS_NODE_ID, &amp;m0, 0);&#xD;&#xA;&#x9;        call Leds.led0Toggle();&#xD;&#xA;&#x9;        //call RadioStressThread0.sleep(500);&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;    }&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9; "/>
          <implementsEvent Name="RadioStressThread1.run(void* arg)" Contents="&#xD;&#xA;&#x9;   /* event content */&#xD;&#xA;&#x9;   &#xD;&#xA;&#x9;    call BlockingAMControl.start();&#xD;&#xA;&#x9;    for(;;) {&#xD;&#xA;&#x9;      if(TOS_NODE_ID == 0) {&#xD;&#xA;&#x9;        call BlockingReceive1.receive(&amp;m1, 5000);&#xD;&#xA;&#x9;        call Leds.led1Toggle();&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;      else {&#xD;&#xA;&#x9;        call BlockingAMSend1.send(!TOS_NODE_ID, &amp;m1, 0);&#xD;&#xA;&#x9;        call Leds.led1Toggle();&#xD;&#xA;&#x9;        //call RadioStressThread1.sleep(500);&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;    }&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9; "/>
          <implementsEvent Name="RadioStressThread2.run(void* arg)" Contents="&#xD;&#xA;&#x9;   /* event content */&#xD;&#xA;&#x9;   &#xD;&#xA;&#x9;    call BlockingAMControl.start();&#xD;&#xA;&#x9;    for(;;) {&#xD;&#xA;&#x9;      if(TOS_NODE_ID == 0) {&#xD;&#xA;&#x9;        call BlockingReceive2.receive(&amp;m2, 5000);&#xD;&#xA;&#x9;        call Leds.led2Toggle();&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;      else {&#xD;&#xA;&#x9;        call BlockingAMSend2.send(!TOS_NODE_ID, &amp;m2, 0);&#xD;&#xA;&#x9;        call Leds.led2Toggle();&#xD;&#xA;&#x9;        //call RadioStressThread2.sleep(500);&#xD;&#xA;&#x9;      }&#xD;&#xA;&#x9;    }&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9; "/>
        </has_module_implementation>
      </containsModule>
      <hasIncludeDecleration Name="AM.h"/>
    </hasComponent>
    <hasComponent Name="Configuration Component">
      <containsConfiguration Name="RadioStressAppC">
        <has_configuration_signature Name="RadioStressAppC"/>
        <has_configuration_implementation>
          <hasWiring Description="">
            <has_nesC_wiring_code Content="MainC.Boot &lt;- RadioStressC"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingAMControl -> BlockingActiveMessageC"/>
            <has_nesC_wiring_code Content="RadioStressC.Leds -> LedsC"/>
            <has_nesC_wiring_code Content="RadioStressC.RadioStressThread0 -> RadioStressThread0"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingAMSend0 -> BlockingAMSender0"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingReceive0 -> BlockingAMReceiver0"/>
            <has_nesC_wiring_code Content="RadioStressC.RadioStressThread1 -> RadioStressThread1"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingAMSend1 -> BlockingAMSender1"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingReceive1 -> BlockingAMReceiver1"/>
            <has_nesC_wiring_code Content="RadioStressC.RadioStressThread2 -> RadioStressThread2"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingAMSend2 -> BlockingAMSender2"/>
            <has_nesC_wiring_code Content="RadioStressC.BlockingReceive2 -> BlockingAMReceiver2"/>
          </hasWiring>
          <definesComponents Name="MainC"/>
          <definesComponents Name="RadioStressC"/>
          <definesComponents Name="LedsC"/>
          <definesComponents Name="BlockingActiveMessageC"/>
          <definesComponents Name="new ThreadC(300) as RadioStressThread0"/>
          <definesComponents Name="new BlockingAMSenderC(220) as BlockingAMSender0"/>
          <definesComponents Name="new BlockingAMReceiverC(220) as BlockingAMReceiver0"/>
          <definesComponents Name="new ThreadC(300) as RadioStressThread1"/>
          <definesComponents Name="new BlockingAMSenderC(221) as BlockingAMSender1"/>
          <definesComponents Name="new BlockingAMReceiverC(221) as BlockingAMReceiver1"/>
          <definesComponents Name="new ThreadC(300) as RadioStressThread2"/>
          <definesComponents Name="new BlockingAMSenderC(222) as BlockingAMSender2"/>
          <definesComponents Name="new BlockingAMReceiverC(222) as BlockingAMReceiver2"/>
          <definesComponents Name="ActiveMessageC"/>
        </has_configuration_implementation>
      </containsConfiguration>
    </hasComponent>
  </hasApplication>
</tinyos_metamodel:Mote>
