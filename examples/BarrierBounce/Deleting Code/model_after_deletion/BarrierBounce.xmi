<?xml version="1.0" encoding="UTF-8"?>
<tinyos_metamodel:Mote xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:tinyos_metamodel="http://emf.tinyos_metamodel">
  <hasApplication Name="BarrierBounce">
    <hasComponent Name="Module Component">
      <containsModule Name="BarrierBounceC">
        <has_module_signature Name="BarrierBounceC">
          <usesInterface Name="Boot"/>
          <usesInterface Name="BlockingStdControl as BlockingAMControl"/>
          <usesInterface Name="Barrier"/>
          <usesInterface Name="Thread as BounceThread0"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend0"/>
          <usesInterface Name="BlockingReceive as BlockingReceive0"/>
          <usesInterface Name="Thread as BounceThread1"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend1"/>
          <usesInterface Name="BlockingReceive as BlockingReceive1"/>
          <usesInterface Name="Thread as BounceThread2"/>
          <usesInterface Name="BlockingAMSend as BlockingAMSend2"/>
          <usesInterface Name="BlockingReceive as BlockingReceive2"/>
          <usesInterface Name="Thread as SyncThread"/>
          <usesInterface Name="Leds"/>
          <usesInterface Name="Timer&lt;TMilli> as TestTimer"/>
          <usesInterface Name="SplitControl as RadioControl"/>
        </has_module_signature>
        <has_module_implementation>
          <has_nesC_code Content="uint8_t sharedCounter;"/>
          <has_nesC_code Content="message_t m0,m1,m2;"/>
          <has_nesC_code Content="barrier_t b0;"/>
          <implementsEvent Name="Boot.booted()" Contents="&#xD;&#xA;    //Reset all barriers used in this program at initialization&#xD;&#xA;    call Barrier.reset(&amp;b0, 4);&#xD;&#xA;&#xD;&#xA;    //Start the sync thread to power up the AM layer&#xD;&#xA;    call SyncThread.start(NULL);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;call TestTimer.startPeriodic( 600 );&#xD;&#xA;&#x9;&#x9;call RadioControl.start();&#xD;&#xA;  "/>
          <implementsEvent Name="BounceThread0.run(void* arg)" Contents="&#xD;&#xA;    for(;;) {&#xD;&#xA;      call Leds.led0Off();&#xD;&#xA;      call BlockingAMSend0.send(!TOS_NODE_ID, &amp;m0, 0);&#xD;&#xA;      if(call BlockingReceive0.receive(&amp;m0, 5000) == SUCCESS) {&#xD;&#xA;        call Barrier.block(&amp;b0);&#xD;&#xA;        call Leds.led0On();&#xD;&#xA;      &#x9;call BounceThread0.sleep(500);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  "/>
          <implementsEvent Name="BounceThread1.run(void* arg)" Contents="&#xD;&#xA;    for(;;) {&#xD;&#xA;      call Leds.led1Off();&#xD;&#xA;      call BlockingAMSend1.send(!TOS_NODE_ID, &amp;m1, 0);&#xD;&#xA;      if(call BlockingReceive1.receive(&amp;m1, 5000) == SUCCESS) {&#xD;&#xA;        call Barrier.block(&amp;b0);&#xD;&#xA;        call Leds.led1On();&#xD;&#xA;      &#x9;call BounceThread1.sleep(500);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  "/>
          <implementsEvent Name="BounceThread2.run(void* arg)" Contents=" &#xD;&#xA;    for(;;) {&#xD;&#xA;      call Leds.led2Off();&#xD;&#xA;      call BlockingAMSend2.send(!TOS_NODE_ID, &amp;m2, 0);&#xD;&#xA;      if(call BlockingReceive2.receive(&amp;m2, 5000) == SUCCESS) {&#xD;&#xA;        call Barrier.block(&amp;b0);&#xD;&#xA;        call Leds.led2On();&#xD;&#xA;      &#x9;call BounceThread2.sleep(500);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  "/>
          <implementsEvent Name="SyncThread.run(void* arg)" Contents="&#xD;&#xA;    //Once the am layer is powered on, start the rest of&#xD;&#xA;    //  the threads&#xD;&#xA;    call BlockingAMControl.start();&#xD;&#xA;    call BounceThread0.start(NULL);&#xD;&#xA;    call BounceThread1.start(NULL);&#xD;&#xA;    call BounceThread2.start(NULL);&#xD;&#xA;    &#xD;&#xA;    for(;;) {&#xD;&#xA;      call Barrier.block(&amp;b0);&#xD;&#xA;      call Barrier.reset(&amp;b0, 4);&#xD;&#xA;    }&#xD;&#xA;  "/>
          <implementsEvent Name="TestTimer.fired()" Contents="&#xD;&#xA;    sharedCounter++;&#xD;&#xA;&#x9;dbg(&quot;BounceC&quot;, &quot;TestTimer was run successfully @ %s.\n&quot;, sim_time_string());&#xD;&#xA;  "/>
          <implementsEvent Name="RadioControl.startDone(error_t err)" Contents="&#xD;&#xA;    if (err == SUCCESS) {&#xD;&#xA;     dbg(&quot;BounceC&quot;, &quot;RadioControl was run successfully @ %s.\n&quot;, sim_time_string());&#xD;&#xA;    }&#xD;&#xA;&#x9;call RadioControl.stop();&#xD;&#xA;  "/>
        </has_module_implementation>
      </containsModule>
    </hasComponent>
    <hasComponent Name="Configuration Component">
      <containsConfiguration Name="BarrierBounceAppC">
        <has_configuration_signature Name="BarrierBounceAppC"/>
        <has_configuration_implementation>
          <hasWiring Description="">
            <has_nesC_wiring_code Content="MainC.Boot &lt;- BounceC"/>
            <has_nesC_wiring_code Content="BounceC.BlockingAMControl -> BlockingActiveMessageC"/>
            <has_nesC_wiring_code Content="BounceC.Leds -> LedsC"/>
            <has_nesC_wiring_code Content="BounceC.TestTimer -> TestTimer"/>
            <has_nesC_wiring_code Content="BounceC.RadioControl -> ActiveMessageC"/>
            <has_nesC_wiring_code Content="BounceC.Barrier -> ThreadSynchronizationC"/>
            <has_nesC_wiring_code Content="BounceC.BounceThread0 -> BounceThread0"/>
            <has_nesC_wiring_code Content="BounceC.BlockingAMSend0 -> BlockingAMSender0"/>
            <has_nesC_wiring_code Content="BounceC.BlockingReceive0 -> BlockingAMReceiver0"/>
            <has_nesC_wiring_code Content="BounceC.BounceThread1 -> BounceThread1"/>
            <has_nesC_wiring_code Content="BounceC.BlockingAMSend1 -> BlockingAMSender1"/>
            <has_nesC_wiring_code Content="BounceC.BlockingReceive1 -> BlockingAMReceiver1"/>
            <has_nesC_wiring_code Content="BounceC.BounceThread2 -> BounceThread2"/>
            <has_nesC_wiring_code Content="BounceC.BlockingAMSend2 -> BlockingAMSender2"/>
            <has_nesC_wiring_code Content="BounceC.BlockingReceive2 -> BlockingAMReceiver2"/>
            <has_nesC_wiring_code Content="BounceC.SyncThread -> SyncThread"/>
          </hasWiring>
          <definesComponents Name="MainC, BarrierBounceC as BounceC,  LedsC"/>
          <definesComponents Name="BlockingActiveMessageC"/>
          <definesComponents Name="new TimerMilliC() as TestTimer"/>
          <definesComponents Name="ActiveMessageC"/>
          <definesComponents Name="ThreadSynchronizationC"/>
          <definesComponents Name="new ThreadC(BOUNCE_THREAD0_STACK_SIZE) as BounceThread0"/>
          <definesComponents Name="new BlockingAMSenderC(AM_BOUNCE0_MSG) as BlockingAMSender0"/>
          <definesComponents Name="new BlockingAMReceiverC(AM_BOUNCE0_MSG) as BlockingAMReceiver0"/>
          <definesComponents Name="new ThreadC(BOUNCE_THREAD1_STACK_SIZE) as BounceThread1"/>
          <definesComponents Name="new BlockingAMSenderC(AM_BOUNCE1_MSG) as BlockingAMSender1"/>
          <definesComponents Name="new BlockingAMReceiverC(AM_BOUNCE1_MSG) as BlockingAMReceiver1"/>
          <definesComponents Name="new ThreadC(BOUNCE_THREAD2_STACK_SIZE) as BounceThread2"/>
          <definesComponents Name="new BlockingAMSenderC(AM_BOUNCE2_MSG) as BlockingAMSender2"/>
          <definesComponents Name="new BlockingAMReceiverC(AM_BOUNCE2_MSG) as BlockingAMReceiver2"/>
          <definesComponents Name="new ThreadC(SYNC_THREAD_STACK_SIZE) as SyncThread"/>
        </has_configuration_implementation>
      </containsConfiguration>
      <hasIncludeDecleration Name="barrier_bounce.h"/>
      <hasIncludeDecleration Name="stack.h"/>
    </hasComponent>
  </hasApplication>
</tinyos_metamodel:Mote>
